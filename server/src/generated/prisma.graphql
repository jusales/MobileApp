# source: https://eu1.prisma.sh/juliana-sales/Kinetikos/dev
# timestamp: Tue Jul 31 2018 17:55:02 GMT+0100 (Western European Summer Time)

type AggregateAlternatives {
  count: Int!
}

type AggregateAlternativeText {
  count: Int!
}

type AggregateAnswer {
  count: Int!
}

type AggregateLanguage {
  count: Int!
}

type AggregateList {
  count: Int!
}

type AggregateQuestion {
  count: Int!
}

type AggregateQuestionText {
  count: Int!
}

type AggregateQuestionType {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Alternatives implements Node {
  id: ID!
  description: String!
  value: Float!
  order: Int!
  listID: ID!
}

"""A connection to a list of items."""
type AlternativesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AlternativesEdge]!
  aggregate: AggregateAlternatives!
}

input AlternativesCreateInput {
  description: String!
  value: Float!
  order: Int!
  listID: ID!
}

"""An edge in a connection."""
type AlternativesEdge {
  """The item at the end of the edge."""
  node: Alternatives!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AlternativesOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  value_ASC
  value_DESC
  order_ASC
  order_DESC
  listID_ASC
  listID_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AlternativesPreviousValues {
  id: ID!
  description: String!
  value: Float!
  order: Int!
  listID: ID!
}

type AlternativesSubscriptionPayload {
  mutation: MutationType!
  node: Alternatives
  updatedFields: [String!]
  previousValues: AlternativesPreviousValues
}

input AlternativesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AlternativesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AlternativesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AlternativesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AlternativesWhereInput
}

input AlternativesUpdateInput {
  description: String
  value: Float
  order: Int
  listID: ID
}

input AlternativesWhereInput {
  """Logical AND on all given filters."""
  AND: [AlternativesWhereInput!]

  """Logical OR on all given filters."""
  OR: [AlternativesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AlternativesWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
  order: Int

  """All values that are not equal to given value."""
  order_not: Int

  """All values that are contained in given list."""
  order_in: [Int!]

  """All values that are not contained in given list."""
  order_not_in: [Int!]

  """All values less than the given value."""
  order_lt: Int

  """All values less than or equal the given value."""
  order_lte: Int

  """All values greater than the given value."""
  order_gt: Int

  """All values greater than or equal the given value."""
  order_gte: Int
  listID: ID

  """All values that are not equal to given value."""
  listID_not: ID

  """All values that are contained in given list."""
  listID_in: [ID!]

  """All values that are not contained in given list."""
  listID_not_in: [ID!]

  """All values less than the given value."""
  listID_lt: ID

  """All values less than or equal the given value."""
  listID_lte: ID

  """All values greater than the given value."""
  listID_gt: ID

  """All values greater than or equal the given value."""
  listID_gte: ID

  """All values containing the given string."""
  listID_contains: ID

  """All values not containing the given string."""
  listID_not_contains: ID

  """All values starting with the given string."""
  listID_starts_with: ID

  """All values not starting with the given string."""
  listID_not_starts_with: ID

  """All values ending with the given string."""
  listID_ends_with: ID

  """All values not ending with the given string."""
  listID_not_ends_with: ID
}

input AlternativesWhereUniqueInput {
  id: ID
}

type AlternativeText implements Node {
  id: ID!
  alternativeID: ID!
  language(where: LanguageWhereInput): Language!
  text: String!
}

"""A connection to a list of items."""
type AlternativeTextConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AlternativeTextEdge]!
  aggregate: AggregateAlternativeText!
}

input AlternativeTextCreateInput {
  alternativeID: ID!
  text: String!
  language: LanguageCreateOneInput!
}

"""An edge in a connection."""
type AlternativeTextEdge {
  """The item at the end of the edge."""
  node: AlternativeText!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AlternativeTextOrderByInput {
  id_ASC
  id_DESC
  alternativeID_ASC
  alternativeID_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AlternativeTextPreviousValues {
  id: ID!
  alternativeID: ID!
  text: String!
}

type AlternativeTextSubscriptionPayload {
  mutation: MutationType!
  node: AlternativeText
  updatedFields: [String!]
  previousValues: AlternativeTextPreviousValues
}

input AlternativeTextSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AlternativeTextSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AlternativeTextSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AlternativeTextSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AlternativeTextWhereInput
}

input AlternativeTextUpdateInput {
  alternativeID: ID
  text: String
  language: LanguageUpdateOneInput
}

input AlternativeTextWhereInput {
  """Logical AND on all given filters."""
  AND: [AlternativeTextWhereInput!]

  """Logical OR on all given filters."""
  OR: [AlternativeTextWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AlternativeTextWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  alternativeID: ID

  """All values that are not equal to given value."""
  alternativeID_not: ID

  """All values that are contained in given list."""
  alternativeID_in: [ID!]

  """All values that are not contained in given list."""
  alternativeID_not_in: [ID!]

  """All values less than the given value."""
  alternativeID_lt: ID

  """All values less than or equal the given value."""
  alternativeID_lte: ID

  """All values greater than the given value."""
  alternativeID_gt: ID

  """All values greater than or equal the given value."""
  alternativeID_gte: ID

  """All values containing the given string."""
  alternativeID_contains: ID

  """All values not containing the given string."""
  alternativeID_not_contains: ID

  """All values starting with the given string."""
  alternativeID_starts_with: ID

  """All values not starting with the given string."""
  alternativeID_not_starts_with: ID

  """All values ending with the given string."""
  alternativeID_ends_with: ID

  """All values not ending with the given string."""
  alternativeID_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  language: LanguageWhereInput
}

input AlternativeTextWhereUniqueInput {
  id: ID
}

type Answer implements Node {
  id: ID!
  questionID: ID!
  value: Float
  alternativeID: ID
}

"""A connection to a list of items."""
type AnswerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnswerEdge]!
  aggregate: AggregateAnswer!
}

input AnswerCreateInput {
  questionID: ID!
  value: Float
  alternativeID: ID
}

"""An edge in a connection."""
type AnswerEdge {
  """The item at the end of the edge."""
  node: Answer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AnswerOrderByInput {
  id_ASC
  id_DESC
  questionID_ASC
  questionID_DESC
  value_ASC
  value_DESC
  alternativeID_ASC
  alternativeID_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AnswerPreviousValues {
  id: ID!
  questionID: ID!
  value: Float
  alternativeID: ID
}

type AnswerSubscriptionPayload {
  mutation: MutationType!
  node: Answer
  updatedFields: [String!]
  previousValues: AnswerPreviousValues
}

input AnswerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AnswerWhereInput
}

input AnswerUpdateInput {
  questionID: ID
  value: Float
  alternativeID: ID
}

input AnswerWhereInput {
  """Logical AND on all given filters."""
  AND: [AnswerWhereInput!]

  """Logical OR on all given filters."""
  OR: [AnswerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AnswerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  questionID: ID

  """All values that are not equal to given value."""
  questionID_not: ID

  """All values that are contained in given list."""
  questionID_in: [ID!]

  """All values that are not contained in given list."""
  questionID_not_in: [ID!]

  """All values less than the given value."""
  questionID_lt: ID

  """All values less than or equal the given value."""
  questionID_lte: ID

  """All values greater than the given value."""
  questionID_gt: ID

  """All values greater than or equal the given value."""
  questionID_gte: ID

  """All values containing the given string."""
  questionID_contains: ID

  """All values not containing the given string."""
  questionID_not_contains: ID

  """All values starting with the given string."""
  questionID_starts_with: ID

  """All values not starting with the given string."""
  questionID_not_starts_with: ID

  """All values ending with the given string."""
  questionID_ends_with: ID

  """All values not ending with the given string."""
  questionID_not_ends_with: ID
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
  alternativeID: ID

  """All values that are not equal to given value."""
  alternativeID_not: ID

  """All values that are contained in given list."""
  alternativeID_in: [ID!]

  """All values that are not contained in given list."""
  alternativeID_not_in: [ID!]

  """All values less than the given value."""
  alternativeID_lt: ID

  """All values less than or equal the given value."""
  alternativeID_lte: ID

  """All values greater than the given value."""
  alternativeID_gt: ID

  """All values greater than or equal the given value."""
  alternativeID_gte: ID

  """All values containing the given string."""
  alternativeID_contains: ID

  """All values not containing the given string."""
  alternativeID_not_contains: ID

  """All values starting with the given string."""
  alternativeID_starts_with: ID

  """All values not starting with the given string."""
  alternativeID_not_starts_with: ID

  """All values ending with the given string."""
  alternativeID_ends_with: ID

  """All values not ending with the given string."""
  alternativeID_not_ends_with: ID
}

input AnswerWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Language implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type LanguageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LanguageEdge]!
  aggregate: AggregateLanguage!
}

input LanguageCreateInput {
  name: String!
}

input LanguageCreateOneInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
}

"""An edge in a connection."""
type LanguageEdge {
  """The item at the end of the edge."""
  node: Language!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LanguageOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LanguagePreviousValues {
  id: ID!
  name: String!
}

type LanguageSubscriptionPayload {
  mutation: MutationType!
  node: Language
  updatedFields: [String!]
  previousValues: LanguagePreviousValues
}

input LanguageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LanguageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LanguageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LanguageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LanguageWhereInput
}

input LanguageUpdateDataInput {
  name: String
}

input LanguageUpdateInput {
  name: String
}

input LanguageUpdateOneInput {
  create: LanguageCreateInput
  connect: LanguageWhereUniqueInput
  delete: Boolean
  update: LanguageUpdateDataInput
  upsert: LanguageUpsertNestedInput
}

input LanguageUpsertNestedInput {
  update: LanguageUpdateDataInput!
  create: LanguageCreateInput!
}

input LanguageWhereInput {
  """Logical AND on all given filters."""
  AND: [LanguageWhereInput!]

  """Logical OR on all given filters."""
  OR: [LanguageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LanguageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input LanguageWhereUniqueInput {
  id: ID
  name: String
}

type List implements Node {
  id: ID!
  description: String!
}

"""A connection to a list of items."""
type ListConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ListEdge]!
  aggregate: AggregateList!
}

input ListCreateInput {
  description: String!
}

"""An edge in a connection."""
type ListEdge {
  """The item at the end of the edge."""
  node: List!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ListOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ListPreviousValues {
  id: ID!
  description: String!
}

type ListSubscriptionPayload {
  mutation: MutationType!
  node: List
  updatedFields: [String!]
  previousValues: ListPreviousValues
}

input ListSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ListSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ListSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ListSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ListWhereInput
}

input ListUpdateInput {
  description: String
}

input ListWhereInput {
  """Logical AND on all given filters."""
  AND: [ListWhereInput!]

  """Logical OR on all given filters."""
  OR: [ListWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ListWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

input ListWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createQuestion(data: QuestionCreateInput!): Question!
  createQuestionType(data: QuestionTypeCreateInput!): QuestionType!
  createQuestionText(data: QuestionTextCreateInput!): QuestionText!
  createAlternatives(data: AlternativesCreateInput!): Alternatives!
  createAlternativeText(data: AlternativeTextCreateInput!): AlternativeText!
  createList(data: ListCreateInput!): List!
  createAnswer(data: AnswerCreateInput!): Answer!
  createLanguage(data: LanguageCreateInput!): Language!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateQuestionType(data: QuestionTypeUpdateInput!, where: QuestionTypeWhereUniqueInput!): QuestionType
  updateQuestionText(data: QuestionTextUpdateInput!, where: QuestionTextWhereUniqueInput!): QuestionText
  updateAlternatives(data: AlternativesUpdateInput!, where: AlternativesWhereUniqueInput!): Alternatives
  updateAlternativeText(data: AlternativeTextUpdateInput!, where: AlternativeTextWhereUniqueInput!): AlternativeText
  updateList(data: ListUpdateInput!, where: ListWhereUniqueInput!): List
  updateAnswer(data: AnswerUpdateInput!, where: AnswerWhereUniqueInput!): Answer
  updateLanguage(data: LanguageUpdateInput!, where: LanguageWhereUniqueInput!): Language
  deleteUser(where: UserWhereUniqueInput!): User
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteQuestionType(where: QuestionTypeWhereUniqueInput!): QuestionType
  deleteQuestionText(where: QuestionTextWhereUniqueInput!): QuestionText
  deleteAlternatives(where: AlternativesWhereUniqueInput!): Alternatives
  deleteAlternativeText(where: AlternativeTextWhereUniqueInput!): AlternativeText
  deleteList(where: ListWhereUniqueInput!): List
  deleteAnswer(where: AnswerWhereUniqueInput!): Answer
  deleteLanguage(where: LanguageWhereUniqueInput!): Language
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
  upsertQuestionType(where: QuestionTypeWhereUniqueInput!, create: QuestionTypeCreateInput!, update: QuestionTypeUpdateInput!): QuestionType!
  upsertQuestionText(where: QuestionTextWhereUniqueInput!, create: QuestionTextCreateInput!, update: QuestionTextUpdateInput!): QuestionText!
  upsertAlternatives(where: AlternativesWhereUniqueInput!, create: AlternativesCreateInput!, update: AlternativesUpdateInput!): Alternatives!
  upsertAlternativeText(where: AlternativeTextWhereUniqueInput!, create: AlternativeTextCreateInput!, update: AlternativeTextUpdateInput!): AlternativeText!
  upsertList(where: ListWhereUniqueInput!, create: ListCreateInput!, update: ListUpdateInput!): List!
  upsertAnswer(where: AnswerWhereUniqueInput!, create: AnswerCreateInput!, update: AnswerUpdateInput!): Answer!
  upsertLanguage(where: LanguageWhereUniqueInput!, create: LanguageCreateInput!, update: LanguageUpdateInput!): Language!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyQuestions(data: QuestionUpdateInput!, where: QuestionWhereInput): BatchPayload!
  updateManyQuestionTypes(data: QuestionTypeUpdateInput!, where: QuestionTypeWhereInput): BatchPayload!
  updateManyQuestionTexts(data: QuestionTextUpdateInput!, where: QuestionTextWhereInput): BatchPayload!
  updateManyAlternativeses(data: AlternativesUpdateInput!, where: AlternativesWhereInput): BatchPayload!
  updateManyAlternativeTexts(data: AlternativeTextUpdateInput!, where: AlternativeTextWhereInput): BatchPayload!
  updateManyLists(data: ListUpdateInput!, where: ListWhereInput): BatchPayload!
  updateManyAnswers(data: AnswerUpdateInput!, where: AnswerWhereInput): BatchPayload!
  updateManyLanguages(data: LanguageUpdateInput!, where: LanguageWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
  deleteManyQuestionTypes(where: QuestionTypeWhereInput): BatchPayload!
  deleteManyQuestionTexts(where: QuestionTextWhereInput): BatchPayload!
  deleteManyAlternativeses(where: AlternativesWhereInput): BatchPayload!
  deleteManyAlternativeTexts(where: AlternativeTextWhereInput): BatchPayload!
  deleteManyLists(where: ListWhereInput): BatchPayload!
  deleteManyAnswers(where: AnswerWhereInput): BatchPayload!
  deleteManyLanguages(where: LanguageWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
  questionTypes(where: QuestionTypeWhereInput, orderBy: QuestionTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionType]!
  questionTexts(where: QuestionTextWhereInput, orderBy: QuestionTextOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionText]!
  alternativeses(where: AlternativesWhereInput, orderBy: AlternativesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Alternatives]!
  alternativeTexts(where: AlternativeTextWhereInput, orderBy: AlternativeTextOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AlternativeText]!
  lists(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [List]!
  answers(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Answer]!
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language]!
  user(where: UserWhereUniqueInput!): User
  question(where: QuestionWhereUniqueInput!): Question
  questionType(where: QuestionTypeWhereUniqueInput!): QuestionType
  questionText(where: QuestionTextWhereUniqueInput!): QuestionText
  alternatives(where: AlternativesWhereUniqueInput!): Alternatives
  alternativeText(where: AlternativeTextWhereUniqueInput!): AlternativeText
  list(where: ListWhereUniqueInput!): List
  answer(where: AnswerWhereUniqueInput!): Answer
  language(where: LanguageWhereUniqueInput!): Language
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  questionsConnection(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!
  questionTypesConnection(where: QuestionTypeWhereInput, orderBy: QuestionTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionTypeConnection!
  questionTextsConnection(where: QuestionTextWhereInput, orderBy: QuestionTextOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionTextConnection!
  alternativesesConnection(where: AlternativesWhereInput, orderBy: AlternativesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AlternativesConnection!
  alternativeTextsConnection(where: AlternativeTextWhereInput, orderBy: AlternativeTextOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AlternativeTextConnection!
  listsConnection(where: ListWhereInput, orderBy: ListOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ListConnection!
  answersConnection(where: AnswerWhereInput, orderBy: AnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnswerConnection!
  languagesConnection(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LanguageConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Question implements Node {
  id: ID!
  description: String!
  questionTypeID: ID!
  listID: ID
}

"""A connection to a list of items."""
type QuestionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  description: String!
  questionTypeID: ID!
  listID: ID
}

"""An edge in a connection."""
type QuestionEdge {
  """The item at the end of the edge."""
  node: Question!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  questionTypeID_ASC
  questionTypeID_DESC
  listID_ASC
  listID_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionPreviousValues {
  id: ID!
  description: String!
  questionTypeID: ID!
  listID: ID
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
}

type QuestionText implements Node {
  id: ID!
  text: String!
  language(where: LanguageWhereInput): Language!
  questionID: ID!
}

"""A connection to a list of items."""
type QuestionTextConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionTextEdge]!
  aggregate: AggregateQuestionText!
}

input QuestionTextCreateInput {
  text: String!
  questionID: ID!
  language: LanguageCreateOneInput!
}

"""An edge in a connection."""
type QuestionTextEdge {
  """The item at the end of the edge."""
  node: QuestionText!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionTextOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  questionID_ASC
  questionID_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionTextPreviousValues {
  id: ID!
  text: String!
  questionID: ID!
}

type QuestionTextSubscriptionPayload {
  mutation: MutationType!
  node: QuestionText
  updatedFields: [String!]
  previousValues: QuestionTextPreviousValues
}

input QuestionTextSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionTextSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionTextSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionTextSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionTextWhereInput
}

input QuestionTextUpdateInput {
  text: String
  questionID: ID
  language: LanguageUpdateOneInput
}

input QuestionTextWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionTextWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionTextWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionTextWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  questionID: ID

  """All values that are not equal to given value."""
  questionID_not: ID

  """All values that are contained in given list."""
  questionID_in: [ID!]

  """All values that are not contained in given list."""
  questionID_not_in: [ID!]

  """All values less than the given value."""
  questionID_lt: ID

  """All values less than or equal the given value."""
  questionID_lte: ID

  """All values greater than the given value."""
  questionID_gt: ID

  """All values greater than or equal the given value."""
  questionID_gte: ID

  """All values containing the given string."""
  questionID_contains: ID

  """All values not containing the given string."""
  questionID_not_contains: ID

  """All values starting with the given string."""
  questionID_starts_with: ID

  """All values not starting with the given string."""
  questionID_not_starts_with: ID

  """All values ending with the given string."""
  questionID_ends_with: ID

  """All values not ending with the given string."""
  questionID_not_ends_with: ID
  language: LanguageWhereInput
}

input QuestionTextWhereUniqueInput {
  id: ID
}

type QuestionType implements Node {
  id: ID!
  description: String!
}

"""A connection to a list of items."""
type QuestionTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionTypeEdge]!
  aggregate: AggregateQuestionType!
}

input QuestionTypeCreateInput {
  description: String!
}

"""An edge in a connection."""
type QuestionTypeEdge {
  """The item at the end of the edge."""
  node: QuestionType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionTypeOrderByInput {
  id_ASC
  id_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionTypePreviousValues {
  id: ID!
  description: String!
}

type QuestionTypeSubscriptionPayload {
  mutation: MutationType!
  node: QuestionType
  updatedFields: [String!]
  previousValues: QuestionTypePreviousValues
}

input QuestionTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionTypeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionTypeWhereInput
}

input QuestionTypeUpdateInput {
  description: String
}

input QuestionTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

input QuestionTypeWhereUniqueInput {
  id: ID
  description: String
}

input QuestionUpdateInput {
  description: String
  questionTypeID: ID
  listID: ID
}

input QuestionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  questionTypeID: ID

  """All values that are not equal to given value."""
  questionTypeID_not: ID

  """All values that are contained in given list."""
  questionTypeID_in: [ID!]

  """All values that are not contained in given list."""
  questionTypeID_not_in: [ID!]

  """All values less than the given value."""
  questionTypeID_lt: ID

  """All values less than or equal the given value."""
  questionTypeID_lte: ID

  """All values greater than the given value."""
  questionTypeID_gt: ID

  """All values greater than or equal the given value."""
  questionTypeID_gte: ID

  """All values containing the given string."""
  questionTypeID_contains: ID

  """All values not containing the given string."""
  questionTypeID_not_contains: ID

  """All values starting with the given string."""
  questionTypeID_starts_with: ID

  """All values not starting with the given string."""
  questionTypeID_not_starts_with: ID

  """All values ending with the given string."""
  questionTypeID_ends_with: ID

  """All values not ending with the given string."""
  questionTypeID_not_ends_with: ID
  listID: ID

  """All values that are not equal to given value."""
  listID_not: ID

  """All values that are contained in given list."""
  listID_in: [ID!]

  """All values that are not contained in given list."""
  listID_not_in: [ID!]

  """All values less than the given value."""
  listID_lt: ID

  """All values less than or equal the given value."""
  listID_lte: ID

  """All values greater than the given value."""
  listID_gt: ID

  """All values greater than or equal the given value."""
  listID_gte: ID

  """All values containing the given string."""
  listID_contains: ID

  """All values not containing the given string."""
  listID_not_contains: ID

  """All values starting with the given string."""
  listID_starts_with: ID

  """All values not starting with the given string."""
  listID_not_starts_with: ID

  """All values ending with the given string."""
  listID_ends_with: ID

  """All values not ending with the given string."""
  listID_not_ends_with: ID
}

input QuestionWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
  questionType(where: QuestionTypeSubscriptionWhereInput): QuestionTypeSubscriptionPayload
  questionText(where: QuestionTextSubscriptionWhereInput): QuestionTextSubscriptionPayload
  alternatives(where: AlternativesSubscriptionWhereInput): AlternativesSubscriptionPayload
  alternativeText(where: AlternativeTextSubscriptionWhereInput): AlternativeTextSubscriptionPayload
  list(where: ListSubscriptionWhereInput): ListSubscriptionPayload
  answer(where: AnswerSubscriptionWhereInput): AnswerSubscriptionPayload
  language(where: LanguageSubscriptionWhereInput): LanguageSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
